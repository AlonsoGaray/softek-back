/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** @description Health check endpoint for Softek API */
    get: operations["healthCheck"];
  };
  "/api/films/": {
    /** @description Obtener todas las peliculas de SWAPI */
    get: operations["getAllFilms"];
  };
  "/api/films/id/{id}": {
    /** @description Obtener una pelicula de SWAPI de acuerdo a su id */
    get: operations["getFilmById"];
  };
  "/api/films/softek/v1/": {
    /** @description Obtener todas las peliculas en Softek */
    get: operations["obtenerPeliculasSoftek"];
    /** @description Crear una pelicula para la bd de Softek */
    post: operations["crearPeliculaSoftek"];
  };
  "/api/people/": {
    /** @description Obtener todas las personas de SWAPI */
    get: operations["getAllPeople"];
  };
  "/api/people/{pageNumber}": {
    /** @description Obtener todas las personas de SWAPI de una pagina especifica */
    get: operations["getAllPeople2"];
  };
  "/api/people/id/{id}": {
    /** @description Obtener una personas de SWAPI de acuerdo a su id */
    get: operations["getPersonById"];
  };
  "/api/people/softek/v1/": {
    /** @description Obtener todas las personas en Softek */
    get: operations["obtenerPersonasSoftek"];
    /** @description Crear una persona para la bd de Softek */
    post: operations["crearPeronaSoftek"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Todas las peliculas encontradas en SWAPI */
    TodasPeliculasSWAPI: {
      /**
       * @description Total numero de personas encontradas
       * @example 5
       */
      total?: number;
      /**
       * @description URL para la siguiente pagina
       * @example https://xv0nyi1sta.execute-api.us-east-1.amazonaws.com/dev/api/films/5
       */
      siguiente?: string | Record<string, never>;
      /**
       * @description URL para la anterior pagina
       * @example https://xv0nyi1sta.execute-api.us-east-1.amazonaws.com/dev/api/films/3
       */
      anterior?: string | Record<string, never>;
      /** @description Lista de peliculas */
      resultados?: components["schemas"]["PeliculaSWAPI"][];
    };
    TodasPersonasSoftek: {
      /**
       * @description Numero de personas encontradas
       * @example 3
       */
      Count?: number;
      /** @description Lista de personas */
      Items?: components["schemas"]["PersonaSoftek"][];
      /**
       * @description Numero de personas escaneadas
       * @example 3
       */
      ScannedCount?: number;
    };
    CrearPersonaSoftekResponse: {
      /**
       * @description Metodo utilizado
       * @example CREAR PERSONA
       */
      Metodo?: string;
      /**
       * @description Respuesta del metodo
       * @example EXITOSO
       */
      Respuesta?: string;
      Item?: components["schemas"]["PersonaSoftek"];
    };
    /** @description Todas las personas encontradas en SWAPI */
    TodasPersonasSWAPI: {
      /**
       * @description Total numero de personas encontradas
       * @example 82
       */
      total?: number;
      /**
       * @description URL para la siguiente pagina
       * @example https://xv0nyi1sta.execute-api.us-east-1.amazonaws.com/dev/api/people/5
       */
      siguiente?: string | Record<string, never>;
      /**
       * @description URL para la anterior pagina
       * @example https://xv0nyi1sta.execute-api.us-east-1.amazonaws.com/dev/api/people/3
       */
      anterior?: string | Record<string, never>;
      /** @description Lista de personas */
      resultados?: components["schemas"]["PersonaSWAPI"][];
    };
    ErrorModel: {
      message: string;
    };
    /** @description Health check status */
    HealthStatus: {
      /** @enum {string} */
      status: "OK";
    };
    /** @description pelicula encontrada en SWAPI */
    PeliculaSWAPI: {
      /**
       * @description Nombre de la pelicula
       * @example A New Hope
       */
      titulo?: string;
      /**
       * @description Fecha de creacion del registro
       * @example 2014-12-09T13:50:51.644000Z
       */
      creado?: string;
      /**
       * @description Fecha de edicion del registro
       * @example 2014-12-20T21:17:56.891000Z
       */
      editado?: string;
      /**
       * @description Id del episodio
       * @example 3
       */
      id_episodio?: number;
      /**
       * @description Texto de apertura de la pelicula
       * @example It is a period of civil war.
       * Rebel spaceships, striking
       * from a hidden base, have won
       * their first victory against
       * the evil Galactic Empire.
       *
       * During the battle, Rebel
       * spies managed to steal ...
       */
      texto_apertura?: string;
      /**
       * @description Director de la pelicula
       * @example George Lucas
       */
      director?: string;
      /**
       * @description Productor de la pelicula
       * @example Gary Kurtz, Rick McCallum
       */
      productor?: string;
      /**
       * @description Fecha de lanzamiento de la pelicula
       * @example 1977-05-25
       */
      fecha_lanzamiento?: string;
      /** @description Lista de personajes en la pelicula */
      personajes?: string[];
      /** @description Lista de planetas en la pelicula */
      planetas?: string[];
      /** @description Lista de naves en la pelicula */
      naves?: string[];
      /** @description Lista de vehiculos en la pelicula */
      vehiculos?: string[];
      /** @description Lista de especies en la pelicula */
      especies?: string[];
    };
    PeliculaSoftek: {
      /**
       * @description Identificador unico de la pelicula
       * @example f3463eb5-4124-4cf8-9c64-cfcb77cd8819
       */
      id?: string;
      /**
       * @description Nombre de la pelicula
       * @example Softek Movie
       */
      titulo?: string;
      /**
       * @description Fecha de nacimiento de la pelicula
       * @example 19-12-1995
       */
      fecha_lanzamiento?: string;
      /**
       * @description Especie de la pelicula
       * @example Alonso Garay
       */
      director?: string;
    };
    /** @description Persona encontrada en SWAPI */
    PersonaSWAPI: {
      /**
       * @description Nombre de la persona
       * @example Luke Skywalker
       */
      nombre?: string;
      /**
       * @description Fecha de creacion del registro
       * @example 2014-12-09T13:50:51.644000Z
       */
      creado?: string;
      /**
       * @description Fecha de edicion del registro
       * @example 2014-12-20T21:17:56.891000Z
       */
      editado?: string;
      /**
       * @description URL de la persona
       * @example https://swapi.py4e.com/api/people/1/
       */
      url?: string;
      /**
       * @description Altura de la persona
       * @example 172
       */
      altura?: string;
      /**
       * @description Peso de la persona
       * @example 77
       */
      peso?: string;
      /**
       * @description Color de cabello de la persona
       * @example blond
       */
      color_cabello?: string;
      /**
       * @description Color de piel de la persona
       * @example fair
       */
      color_piel?: string;
      /**
       * @description Color de ojos de la persona
       * @example blue
       */
      color_ojos?: string;
      /**
       * @description Fecha de nacimiento de la persona
       * @example 19BBY
       */
      fecha_nacimiento?: string;
      /**
       * @description Genero de la persona
       * @example male
       */
      genero?: string;
      /**
       * @description URL del planeta natal de la persona
       * @example https://swapi.py4e.com/api/planets/1/
       */
      planeta_natal?: string;
      /** @description Lista de peliculas en las que aparece la persona */
      peliculas?: string[];
      /** @description Lista de especies a las que pertenece la persona */
      especies?: string[];
      /** @description Lista de vehiculos que ha manejado la persona */
      vehiculos?: string[];
      /** @description Lista de naves que ha manejado la persona */
      naves?: string[];
    };
    PersonaSoftek: {
      /**
       * @description Identificador unico de la persona
       * @example f3463eb5-4124-4cf8-9c64-cfcb77cd8819
       */
      id?: string;
      /**
       * @description Nombre de la persona
       * @example hola test
       */
      nombre?: string;
      /**
       * @description Fecha de nacimiento de la persona
       * @example 19-12-1995
       */
      fecha_nacimiento?: string;
      /**
       * @description Especie de la persona
       * @example Androide
       * @enum {string}
       */
      especie?: "Humano" | "Androide" | "Wookiee";
      /**
       * @description Altura de la persona
       * @example 1170cm
       */
      altura?: string;
      /**
       * @description Peso de la persona
       * @example 901kg
       */
      peso?: string;
      /**
       * @description Genero de la persona
       * @example Hombre
       */
      genero?: string;
    };
  };
  responses: {
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["ErrorModel"];
      };
    };
    /** @description Not found error */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorModel"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Health check endpoint for Softek API */
  healthCheck: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HealthStatus"];
        };
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener todas las peliculas de SWAPI */
  getAllFilms: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TodasPersonasSWAPI"];
        };
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener una pelicula de SWAPI de acuerdo a su id */
  getFilmById: {
    parameters: {
      path: {
        /** @description Id de la pelicula */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PersonaSWAPI"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener todas las peliculas en Softek */
  obtenerPeliculasSoftek: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TodasPersonasSoftek"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Crear una pelicula para la bd de Softek */
  crearPeliculaSoftek: {
    requestBody: {
      content: {
        "application/json": {
          nombre?: string;
          fecha_lanzamiento?: string;
          director?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CrearPersonaSoftekResponse"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener todas las personas de SWAPI */
  getAllPeople: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TodasPersonasSWAPI"];
        };
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener todas las personas de SWAPI de una pagina especifica */
  getAllPeople2: {
    parameters: {
      path: {
        /** @description Numero de la pagina */
        pageNumber: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TodasPersonasSWAPI"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener una personas de SWAPI de acuerdo a su id */
  getPersonById: {
    parameters: {
      path: {
        /** @description Id de la persona */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PersonaSWAPI"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Obtener todas las personas en Softek */
  obtenerPersonasSoftek: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TodasPersonasSoftek"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Crear una persona para la bd de Softek */
  crearPeronaSoftek: {
    requestBody: {
      content: {
        "application/json": {
          nombre?: string;
          altura?: string;
          peso?: string;
          fecha_nacimiento?: string;
          genero?: string;
          /** @enum {string} */
          especie?: "Humano" | "Androide" | "Wookie";
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CrearPersonaSoftekResponse"];
        };
      };
      /** @description Persona no encontrada */
      404: {
        content: never;
      };
      500: components["responses"]["InternalServerError"];
    };
  };
}
